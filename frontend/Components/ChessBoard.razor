@using System.Collections.Generic
@using System.Threading.Tasks
@using chesslib
@using chesslib.Controllers
@using chesslib.Pieces
@namespace frontend.Components

<div class="container chess-container">
    <h1>Chess Board</h1>
    <div class="chess-board-wrapper">
        <div class="coordinates-left">
            <div>8</div>
            <div>7</div>
            <div>6</div>
            <div>5</div>
            <div>4</div>
            <div>3</div>
            <div>2</div>
            <div>1</div>
        </div>
        <div class="board-container">
            <div class="chess-board">
                @for (int row = 0; row < Board.BoardSize; row++)
                {
                    @for (int col = 0; col < Board.BoardSize; col++)
                    {
                        var square = GameInstance.Board.GetSquare(row, col);
                        <div class="square @(square.Color == SquareColor.Light ? "light" : "dark") @(IsSquareSelected(square) ? "selected" : "")" 
                             data-position="@square.AlgebraicPosition"
                             @onclick="() => SquareClicked(square)">
                            @if (square.Piece != null)
                            {
                                <img src="@GetPieceImagePath(square.Piece)" class="piece-image" alt="@square.Piece.ToString()" />
                            }
                        </div>
                    }
                }
            </div>
            <div class="coordinates-bottom">
                <div>a</div>
                <div>b</div>
                <div>c</div>
                <div>d</div>
                <div>e</div>
                <div>f</div>
                <div>g</div>
                <div>h</div>
            </div>
        </div>
    </div>
    <div class="game-info">
        <p>Current Turn: @GameInstance.CurrentTurn</p>
        <p>Move Count: @GameInstance.MoveHistory.Count</p>
        <p>White: @(UseRandomControllerForWhite ? "Computer" : "Human")</p>
        <p>Black: @(UseRandomControllerForBlack ? "Computer" : "Human")</p>
        @if (selectedSquare != null)
        {
            <p>Selected: @selectedSquare.AlgebraicPosition</p>
        }
        @if (isProcessingAutoMove)
        {
            <p><em>Computer is thinking...</em></p>
        }
        @if (AutoPlayEnabled)
        {
            <button class="btn btn-danger" @onclick="StopAutoPlay">Stop Auto Play</button>
        }
        else if (UseRandomControllerForBlack || UseRandomControllerForWhite)
        {
            <button class="btn btn-primary" @onclick="StartAutoPlay">Start Auto Play</button>
        }
    </div>
</div>

@code {
    private chesslib.Game GameInstance { get; set; } = null!;
    private chesslib.Square? selectedSquare = null;
    private bool isProcessingAutoMove = false;
    private bool _autoPlayEnabled = false;
    private System.Threading.CancellationTokenSource? _autoPlayCts = null;
    private chesslib.Controllers.HumanController _humanWhite = null!;
    private chesslib.Controllers.HumanController _humanBlack = null!;

    [Parameter]
    public EventCallback<Square> OnSquareClicked { get; set; }

    [Parameter]
    public string? StartingPosition { get; set; }
    
    [Parameter]
    public bool UseRandomControllerForBlack { get; set; } = false;
    
    [Parameter]
    public bool UseRandomControllerForWhite { get; set; } = false;
    
    [Parameter]
    public bool AutoPlayEnabled 
    { 
        get => _autoPlayEnabled;
        set 
        {
            if (_autoPlayEnabled != value)
            {
                _autoPlayEnabled = value;
                if (_autoPlayEnabled)
                {
                    StartAutoPlay();
                }
                else
                {
                    StopAutoPlay();
                }
            }
        }
    }
    
    protected override void OnInitialized()
    {
        // Initialize human controllers
        _humanWhite = new chesslib.Controllers.HumanController();
        _humanBlack = new chesslib.Controllers.HumanController();
        
        // Initialize game with appropriate controllers
        if (!string.IsNullOrEmpty(StartingPosition))
        {
            SetupCustomPosition(StartingPosition);
        }
        else
        {
            CreateNewGameWithControllers();
        }
    }
    
    private void CreateNewGameWithControllers()
    {            var whiteController = UseRandomControllerForWhite
                ? (IController)new RandomController()
                : _humanWhite;
                
            var blackController = UseRandomControllerForBlack
                ? (IController)new RandomController()
                : _humanBlack;
                
            GameInstance = new chesslib.Game(whiteController, blackController);
        
        // If computer plays as white and it's the first move, start auto play
        if (UseRandomControllerForWhite && GameInstance.CurrentTurn == PieceColor.White)
        {
            ProcessNextComputerMove();
        }
    }

    protected override void OnParametersSet()
    {
        if (!string.IsNullOrEmpty(StartingPosition))
        {
            SetupCustomPosition(StartingPosition);
        }
    }

    private bool IsSquareSelected(chesslib.Square square)
    {
        return selectedSquare != null && selectedSquare.Row == square.Row && selectedSquare.Column == square.Column;
    }

    private async void SquareClicked(Square square)
    {
        Console.WriteLine($"Square clicked: {square.AlgebraicPosition}");
        
        // Handle the case when it's a human's turn
        bool isHumanTurn = 
            (GameInstance.CurrentTurn == PieceColor.White && !UseRandomControllerForWhite) ||
            (GameInstance.CurrentTurn == PieceColor.Black && !UseRandomControllerForBlack);
            
        if (isHumanTurn)
        {
            // Get the appropriate human controller
            var humanController = GameInstance.CurrentTurn == PieceColor.White ? _humanWhite : _humanBlack;
            
            if (selectedSquare == null)
            {
                // First click - select piece if it's valid
                if (square.Piece != null && square.Piece.Color == GameInstance.CurrentTurn)
                {
                    selectedSquare = square;
                    Console.WriteLine($"Selected piece at {selectedSquare.AlgebraicPosition}");
                }
            }
            else
            {
                // Second click - try to make the move
                if (selectedSquare == square)
                {
                    // Clicking the same square deselects it
                    Console.WriteLine($"Deselecting piece at {selectedSquare.AlgebraicPosition}");
                    selectedSquare = null;
                }
                else
                {
                    Console.WriteLine($"Attempting move from {selectedSquare.AlgebraicPosition} to {square.AlgebraicPosition}");
                    
                    // Store the from/to positions
                    var fromPos = selectedSquare.AlgebraicPosition;
                    var toPos = square.AlgebraicPosition;
                    
                    // Reset the selection immediately to avoid visual confusion
                    selectedSquare = null;
                    
                    // Send the move to the human controller
                    humanController.SetNextMove(fromPos, toPos);
                    
                    // Request the move through the game's controller system
                    bool moveSuccessful = await GameInstance.RequestAndExecuteNextMoveAsync();
                    
                    if (moveSuccessful)
                    {
                        Console.WriteLine($"Move successful: {fromPos} to {toPos}");
                        
                        // Check if it's now the computer's turn and auto play is enabled
                        if (!GameInstance.IsGameOver && 
                            ((GameInstance.CurrentTurn == PieceColor.White && UseRandomControllerForWhite) ||
                            (GameInstance.CurrentTurn == PieceColor.Black && UseRandomControllerForBlack)))
                        {
                            if (AutoPlayEnabled)
                            {
                                // Add a small delay to make the computer move more natural
                                await Task.Delay(300);
                                ProcessNextComputerMove();
                            }
                        }
                    }
                    else
                    {
                        Console.WriteLine($"Invalid move: {fromPos} to {toPos}");
                    }
                }
            }
        }
        else
        {
            // It's the computer's turn, don't allow human interaction
            Console.WriteLine("It's the computer's turn");
        }
        
        await OnSquareClicked.InvokeAsync(square);
        StateHasChanged();
    }

    private string GetPieceImagePath(chesslib.Piece piece)
    {
        string color = piece.Color == chesslib.PieceColor.White ? "white" : "black";
        string pieceType = GetPieceTypeName(piece);
        
        return $"assets/{pieceType}_{color}.png";
    }

    private string GetPieceTypeName(chesslib.Piece piece)
    {
        string typeName = piece.GetType().Name.ToLower();
        return typeName switch
        {
            "rook" => "rook",
            "knight" => "knight",
            "bishop" => "bishop",
            "queen" => "queen",
            "king" => "king",
            "pawn" => "pawn",
            _ => "pawn"
        };
    }

    private void SetupCustomPosition(string position)
    {
        try
        {
            // Create a new board with the custom position
            var customBoard = new Board();
            
            // Parse the position string - expecting format like "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w"
            // For simplicity, we'll support a basic format: piece positions separated by commas
            // Format: "square:piece,square:piece,..." e.g., "e4:wpawn,d5:bknight"
            
            if (position.Contains('/'))
            {
                // FEN-like format (simplified)
                ParseFenPosition(customBoard, position);
            }
            else
            {
                // Simple format: "square:piece,square:piece"
                ParseSimplePosition(customBoard, position);
            }
            
            // Create a new game with the custom board and appropriate controllers
            var whiteController = UseRandomControllerForWhite
                ? (chesslib.Controllers.IController)new chesslib.Controllers.RandomController()
                : _humanWhite;
                
            var blackController = UseRandomControllerForBlack
                ? (chesslib.Controllers.IController)new chesslib.Controllers.RandomController()
                : _humanBlack;
                
            GameInstance = new chesslib.Game(customBoard, whiteController, blackController);
            
            // If computer plays as white and it's the first move, start auto play
            if (UseRandomControllerForWhite && GameInstance.CurrentTurn == PieceColor.White)
            {
                ProcessNextComputerMove();
            }
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error setting up custom position: {ex.Message}");
            // Fall back to standard game
            CreateNewGameWithControllers();
        }
    }
    
    private async void ProcessNextComputerMove()
    {
        if (GameInstance.IsGameOver) return;
        
        isProcessingAutoMove = true;
        StateHasChanged();
        
        try
        {
            // Ask the game to request a move from the current controller
            bool moveSuccessful = await GameInstance.RequestAndExecuteNextMoveAsync();
            
            if (!moveSuccessful)
            {
                Console.WriteLine("Computer could not make a move");
                return;
            }
            
            // If AutoPlay is enabled, schedule the next move
            if (AutoPlayEnabled && !GameInstance.IsGameOver)
            {
                PieceColor nextTurn = GameInstance.CurrentTurn;
                bool isComputerTurn = 
                    (nextTurn == PieceColor.White && UseRandomControllerForWhite) ||
                    (nextTurn == PieceColor.Black && UseRandomControllerForBlack);
                    
                if (isComputerTurn)
                {
                    // Add a small delay to make it feel more natural
                    await Task.Delay(500);
                    ProcessNextComputerMove();
                }
            }
        }
        finally
        {
            isProcessingAutoMove = false;
            StateHasChanged();
        }
    }
    
    private void StartAutoPlay()
    {
        _autoPlayEnabled = true;
        
        // Start the auto play if it's currently a computer's turn
        PieceColor currentTurn = GameInstance.CurrentTurn;
        bool isComputerTurn = 
            (currentTurn == PieceColor.White && UseRandomControllerForWhite) ||
            (currentTurn == PieceColor.Black && UseRandomControllerForBlack);
            
        if (isComputerTurn)
        {
            ProcessNextComputerMove();
        }
    }
    
    private void StopAutoPlay()
    {
        _autoPlayEnabled = false;
    }

    private void ParseSimplePosition(chesslib.Board board, string position)
    {
        var pieces = position.Split(',', StringSplitOptions.RemoveEmptyEntries);
        
        foreach (var pieceStr in pieces)
        {
            var parts = pieceStr.Trim().Split(':');
            if (parts.Length != 2) continue;
            
            var square = parts[0].Trim().ToLower();
            var pieceInfo = parts[1].Trim().ToLower();
            
            // Parse piece info: first character is color (w/b), rest is piece type
            if (pieceInfo.Length < 2) continue;
            
            var color = pieceInfo[0] == 'w' ? chesslib.PieceColor.White : chesslib.PieceColor.Black;
            var pieceType = pieceInfo.Substring(1);
            
            var pieceTypeEnum = pieceType switch
            {
                "pawn" => chesslib.PieceFactory.PieceType.Pawn,
                "rook" => chesslib.PieceFactory.PieceType.Rook,
                "knight" => chesslib.PieceFactory.PieceType.Knight,
                "bishop" => chesslib.PieceFactory.PieceType.Bishop,
                "queen" => chesslib.PieceFactory.PieceType.Queen,
                "king" => chesslib.PieceFactory.PieceType.King,
                _ => chesslib.PieceFactory.PieceType.Pawn
            };
            
            try
            {
                var boardSquare = board.GetSquare(square);
                boardSquare.Piece = chesslib.PieceFactory.CreatePiece(pieceTypeEnum, color);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error placing piece {pieceInfo} on {square}: {ex.Message}");
            }
        }
    }

    private void ParseFenPosition(chesslib.Board board, string fen)
    {
        // Simple FEN parsing - just the piece placement part
        var parts = fen.Split(' ');
        var piecePlacement = parts[0];
        var ranks = piecePlacement.Split('/');
        
        for (int rank = 0; rank < Math.Min(8, ranks.Length); rank++)
        {
            int file = 0;
            foreach (char c in ranks[rank])
            {
                if (char.IsDigit(c))
                {
                    file += int.Parse(c.ToString());
                }
                else if (file < 8)
                {
                    var color = char.IsUpper(c) ? chesslib.PieceColor.White : chesslib.PieceColor.Black;
                    var pieceType = char.ToLower(c) switch
                    {
                        'p' => chesslib.PieceFactory.PieceType.Pawn,
                        'r' => chesslib.PieceFactory.PieceType.Rook,
                        'n' => chesslib.PieceFactory.PieceType.Knight,
                        'b' => chesslib.PieceFactory.PieceType.Bishop,
                        'q' => chesslib.PieceFactory.PieceType.Queen,
                        'k' => chesslib.PieceFactory.PieceType.King,
                        _ => chesslib.PieceFactory.PieceType.Pawn
                    };
                    
                    try
                    {
                        var square = board.GetSquare(rank, file);
                        square.Piece = chesslib.PieceFactory.CreatePiece(pieceType, color);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error placing FEN piece {c} at {rank},{file}: {ex.Message}");
                    }
                    
                    file++;
                }
            }
        }
    }
}
